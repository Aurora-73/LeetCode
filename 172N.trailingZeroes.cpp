// Created: 2025-05-19
#include "MyUtils.hpp"

/*172. 阶乘后的零
给定一个整数 n ，返回 n! 结果中尾随零的数量。
提示 n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1*/

class Solution {
public:
	int trailingZeroes(int n) {
		int count = 0;
		while(n > 0) {
			n /= 5;
			count += n;
		}
		return count;
	}
};
/*尾随零的来源
一个整数末尾有一个 “0” 当且仅当它可以被 10 整除；而 10 = 2 × 5。
在 n! = 1×2×3×…×n 的所有因子中，偶数提供了很多 2，但只有每遇到一个 5，才能与一个 2 配对产生一个 10，从而在结果末尾添一个 0。
统计 5 的个数
    每个能被 5 整除的数（5, 10, 15, …）至少提供一个 5。
    每个能被 25（5²）整除的数（25, 50, 75, …）额外再提供一个 5（因为 25=5×5）。
    每个能被 125（5³）整除的数，又多一个 5，依此类推。
这段代码准确地把所有“5”的贡献都统计了进来，最终 count 就是 n! 末尾零的个数。*/

int main() {
	Solution sol;
}