// Created: 2025-04-27
#include "MyUtils.hpp"

/*190. 颠倒二进制位
颠倒给定的 32 位无符号整数的二进制位。
提示：
请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
示例 1：
输入：n = 00000010100101000001111010011100
输出：964176192 (00111001011110000010100101000000)
解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
示例 2：
输入：n = 11111111111111111111111111111101
输出：3221225471 (10111111111111111111111111111111)
解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。*/

class Solution {
public:
	uint32_t reverseBits(uint32_t n) {
		uint32_t res = 0;
		for(int i = 0; i < 32; i++) {
			res <<= 1;
			res += (n & 1);
			n >>= 1;
		}
		return res;
	}
};

class Solution {
public:
	uint32_t reverseBits(uint32_t n) {
		// 使用二进制掩码代替十六进制
		n = (n >> 16) | (n << 16); // 交换高16位和低16位
		n = ((n & 0b11111111000000001111111100000000) >> 8)
		    | ((n & 0b00000000111111110000000011111111) << 8);
		n = ((n & 0b11110000111100001111000011110000) >> 4)
		    | ((n & 0b00001111000011110000111100001111) << 4);
		n = ((n & 0b11001100110011001100110011001100) >> 2)
		    | ((n & 0b00110011001100110011001100110011) << 2);
		n = ((n & 0b10101010101010101010101010101010) >> 1)
		    | ((n & 0b01010101010101010101010101010101) << 1);
		return n;
	}
};

int main() {
	Solution sol;
}